
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`<q-i>include</q-w> <q-l>"uvm_macros.svh"</q-l>
<a name="2"><q-n>     2  </q-n></a>`<q-i>include</q-w> <q-l>"interface.sv"</q-l>
<a name="3"><q-n>     3  </q-n></a>`<q-i>include</q-w> <q-l>"test.sv"</q-l>
<a name="4"><q-n>     4  </q-n></a>`<q-i>include</q-w> <q-l>"assertion.sv"</q-l>
<a name="5"><q-n>     5  </q-n></a><q-w>import</q-w> uvm_pkg::*;
<a name="6"><q-n>     6  </q-n></a>
<a name="7"><q-n>     7  </q-n></a><q-w>module</q-w> top_dut();
<a name="8"><q-n>     8  </q-n></a>    <q-w>bit</q-w> PCLK = 0;
<a name="9"><q-n>     9  </q-n></a>    <q-w>bit</q-w> clk = 0;
<a name="10"><q-n>     10  </q-n></a>    <q-w>always</q-w> #5 PCLK = ~PCLK;
<a name="11"><q-n>     11  </q-n></a>    <q-w>always</q-w> #20 clk = ~clk;
<a name="12"><q-n>     12  </q-n></a>
<a name="13"><q-n>     13  </q-n></a>    intf my_intf(PCLK, clk);
<a name="14"><q-n>     14  </q-n></a>    apb_to_i2c_top DUT
<a name="15"><q-n>     15  </q-n></a>    (
<a name="16"><q-n>     16  </q-n></a>        .PCLK       (PCLK),
<a name="17"><q-n>     17  </q-n></a>        .clk        (clk),
<a name="18"><q-n>     18  </q-n></a>        .PRESETn    (my_intf.PRESETn),
<a name="19"><q-n>     19  </q-n></a>        .PSELx      (my_intf.PSELx),
<a name="20"><q-n>     20  </q-n></a>        .PENABLE    (my_intf.PENABLE),
<a name="21"><q-n>     21  </q-n></a>        .PWRITE     (my_intf.PWRITE),
<a name="22"><q-n>     22  </q-n></a>        .i2c_sda    (my_intf.sda),
<a name="23"><q-n>     23  </q-n></a>        .i2c_scl    (my_intf.scl),
<a name="24"><q-n>     24  </q-n></a>        .PADDR      (my_intf.PADDR),
<a name="25"><q-n>     25  </q-n></a>        .PWDATA     (my_intf.PWDATA),
<a name="26"><q-n>     26  </q-n></a>        .PREADY     (my_intf.PREADY),
<a name="27"><q-n>     27  </q-n></a>        .PRDATA     (my_intf.PRDATA)
<a name="28"><q-n>     28  </q-n></a>    );
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a>    i2c_slave_model SLAVE
<a name="31"><q-n>     31  </q-n></a>    (
<a name="32"><q-n>     32  </q-n></a>        .sda        (my_intf.sda),
<a name="33"><q-n>     33  </q-n></a>        .scl        (my_intf.scl),
<a name="34"><q-n>     34  </q-n></a>        .check_data (my_intf.check_data),
<a name="35"><q-n>     35  </q-n></a>        .read_data  (my_intf.read_data),
<a name="36"><q-n>     36  </q-n></a>        .saved_data (my_intf.saved_data)
<a name="37"><q-n>     37  </q-n></a>    ); 
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a>    assertion_cov acov(my_intf);
<a name="40"><q-n>     40  </q-n></a>
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>    <q-w>initial</q-w> <q-w>begin</q-w>
<a name="43"><q-n>     43  </q-n></a>        uvm_config_db#(<q-w>virtual</q-w> intf)::set(<q-w>null</q-w>, <q-l>"*"</q-l>, <q-l>"my_intf"</q-l>, my_intf);
<a name="44"><q-n>     44  </q-n></a>        run_test(<q-l>"test"</q-l>);
<a name="45"><q-n>     45  </q-n></a>    <q-w>end</q-w>
<a name="46"><q-n>     46  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>

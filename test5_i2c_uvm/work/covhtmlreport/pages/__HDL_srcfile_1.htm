
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`ifndef SUBS
<a name="2"><q-n>     2  </q-n></a>`<q-a>define</q-w> SUBS
<a name="3"><q-n>     3  </q-n></a>
<a name="4"><q-n>     4  </q-n></a><q-m>// `timescale 1ns/1ns</q-m>
<a name="5"><q-n>     5  </q-n></a>`<q-i>include</q-w> <q-l>"uvm_macros.svh"</q-l>
<a name="6"><q-n>     6  </q-n></a>`<q-i>include</q-w> <q-l>"packet.sv"</q-l>
<a name="7"><q-n>     7  </q-n></a><q-w>import</q-w> uvm_pkg::*;
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a><q-w>class</q-w> subscriber <q-w>extends</q-w> uvm_subscriber #(packet);
<a name="10"><q-n>     10  </q-n></a>    `uvm_component_utils(subscriber)
<a name="11"><q-n>     11  </q-n></a>    uvm_analysis_imp #(packet, subscriber) subscriber_analysis_imp;
<a name="12"><q-n>     12  </q-n></a>    <q-w>byte</q-w> PADDR;
<a name="13"><q-n>     13  </q-n></a>    <q-w>bit</q-w> PWRITE;
<a name="14"><q-n>     14  </q-n></a>
<a name="15"><q-n>     15  </q-n></a>    <q-w>covergroup</q-w> cov;
<a name="16"><q-n>     16  </q-n></a>        reg_addr: <q-w>coverpoint</q-w> PADDR 
<a name="17"><q-n>     17  </q-n></a>        {
<a name="18"><q-n>     18  </q-n></a>            <q-w>bins</q-w> bin2   = {2};              <q-m>// Command</q-m>
<a name="19"><q-n>     19  </q-n></a>            <q-w>bins</q-w> bin4   = {4};              <q-m>// Transmit</q-m>
<a name="20"><q-n>     20  </q-n></a>            <q-w>bins</q-w> bin6   = {6};              <q-m>// Address</q-m>
<a name="21"><q-n>     21  </q-n></a>            <q-w>bins</q-w> bin3   = {3};              <q-m>// Status</q-m>
<a name="22"><q-n>     22  </q-n></a>            <q-w>bins</q-w> bin5   = {5};              <q-m>// Receive</q-m>
<a name="23"><q-n>     23  </q-n></a>        }
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>        rw: <q-w>coverpoint</q-w> PWRITE
<a name="26"><q-n>     26  </q-n></a>        {
<a name="27"><q-n>     27  </q-n></a>            <q-w>bins</q-w> write  = {1};              <q-m>// Write</q-m>
<a name="28"><q-n>     28  </q-n></a>            <q-w>bins</q-w> read   = {0};              <q-m>// Read</q-m>
<a name="29"><q-n>     29  </q-n></a>        }
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>        rw_reg: <q-w>cross</q-w> reg_addr, rw
<a name="32"><q-n>     32  </q-n></a>        {
<a name="33"><q-n>     33  </q-n></a>            <q-w>bins</q-w> read_status = rw_reg <q-w>with</q-w> (reg_addr == 3 &amp;&amp; rw == 1);
<a name="34"><q-n>     34  </q-n></a>            <q-w>bins</q-w> read_receive = rw_reg <q-w>with</q-w> (reg_addr == 5 &amp;&amp; rw == 1); 
<a name="35"><q-n>     35  </q-n></a>            <q-w>bins</q-w> write_command = rw_reg <q-w>with</q-w> (reg_addr == 2 &amp;&amp; rw == 0);
<a name="36"><q-n>     36  </q-n></a>            <q-w>bins</q-w> write_address = rw_reg <q-w>with</q-w> (reg_addr == 6 &amp;&amp; rw == 0); 
<a name="37"><q-n>     37  </q-n></a>            <q-w>bins</q-w> write_transmit = rw_reg <q-w>with</q-w> (reg_addr == 4 &amp;&amp; rw == 0);  
<a name="38"><q-n>     38  </q-n></a>        }
<a name="39"><q-n>     39  </q-n></a>    <q-w>endgroup</q-w>
<a name="40"><q-n>     40  </q-n></a>
<a name="41"><q-n>     41  </q-n></a>    <q-m>// CONSTRUCTOR</q-m>
<a name="42"><q-n>     42  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name = <q-l>"subscriber"</q-l>, uvm_component parent);
<a name="43"><q-n>     43  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="44"><q-n>     44  </q-n></a>        cov = <q-w>new</q-w>();
<a name="45"><q-n>     45  </q-n></a>        subscriber_analysis_imp = <q-w>new</q-w>(<q-l>"subscriber_analysis_imp"</q-l>, <q-w>this</q-w>);
<a name="46"><q-n>     46  </q-n></a>    <q-w>endfunction</q-w>
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a>    <q-m>// BUILD PHASE</q-m>
<a name="49"><q-n>     49  </q-n></a>    <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="50"><q-n>     50  </q-n></a>        <q-w>super</q-w>.build_phase(phase);
<a name="51"><q-n>     51  </q-n></a>        `uvm_info(get_name(), <q-l>"SUBSCRIBER BUILD PHASE"</q-l>, UVM_LOW)
<a name="52"><q-n>     52  </q-n></a>    <q-w>endfunction</q-w> : build_phase
<a name="53"><q-n>     53  </q-n></a>
<a name="54"><q-n>     54  </q-n></a>    <q-m>// SAMPLE</q-m>
<a name="55"><q-n>     55  </q-n></a>    <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> write(packet t);
<a name="56"><q-n>     56  </q-n></a>        `uvm_info(get_name(), <q-l>"sample"</q-l>, UVM_LOW)
<a name="57"><q-n>     57  </q-n></a>        PADDR = t.PADDR;
<a name="58"><q-n>     58  </q-n></a>        PWRITE = t.PWRITE;
<a name="59"><q-n>     59  </q-n></a>        cov.sample();
<a name="60"><q-n>     60  </q-n></a>    <q-w>endfunction</q-w> 
<a name="61"><q-n>     61  </q-n></a><q-w>endclass</q-w> : subscriber
<a name="62"><q-n>     62  </q-n></a>`<q-a>endif</q-w>                                  
<a name="63"><q-n>     63  </q-n></a>
</pre>
</tt>

  
</body>
</html>
